// <auto-generated />
using System;
using DigAccess.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigAccess.DbContext.Migrations
{
    [DbContext(typeof(DigAccessDbContext))]
    [Migration("20241211140427_Change")]
    partial class Change
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigAccess.Data.Entities.Address.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc974363-80a0-47c1-8433-039d4bf99fd0"),
                            Name = "София"
                        },
                        new
                        {
                            Id = new Guid("65561ce7-3410-4c7a-b37f-86184a174a69"),
                            Name = "Варна"
                        },
                        new
                        {
                            Id = new Guid("eb68b7bd-6b9f-4ed4-a542-2467f885d6e7"),
                            Name = "Враца"
                        },
                        new
                        {
                            Id = new Guid("6b827b51-65a3-4b0c-a59e-9f4d56951f82"),
                            Name = "Монтана"
                        },
                        new
                        {
                            Id = new Guid("111ce6a2-bacc-4575-b9a4-c1b3106a86da"),
                            Name = "Бургас"
                        },
                        new
                        {
                            Id = new Guid("7c46394f-7cea-4ecf-80c8-7f0f65fd4534"),
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = new Guid("e68a980e-dfc3-4bbc-a439-000f02ed4331"),
                            Name = "Благоевград"
                        },
                        new
                        {
                            Id = new Guid("9ac5590a-6946-471f-812f-503544b3fba7"),
                            Name = "Русе"
                        },
                        new
                        {
                            Id = new Guid("bfbfa089-59d7-4704-bd00-98cd15ea56d5"),
                            Name = "Видин"
                        },
                        new
                        {
                            Id = new Guid("d4643e31-fb2d-4d97-b2d9-5b8cdbf3a09e"),
                            Name = "Кърджали"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("TELKNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalId")
                        .IsUnique()
                        .HasFilter("[PersonalId] IS NOT NULL");

                    b.ToTable("BlindUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b143304-b5f0-4029-ba97-449f09e66649"),
                            AdministratorId = "36f7ec79-9a12-4317-97ae-74b3476126d8",
                            Birthdate = new DateTime(2002, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = new Guid("cc974363-80a0-47c1-8433-039d4bf99fd0"),
                            FirstName = "Ангел",
                            Gender = 0,
                            IsDeleted = false,
                            LastName = "Петров",
                            MiddleName = "Борисов",
                            PersonalId = "0252199847",
                            Street = "бул. Ломско шосе",
                            StreetNumber = 250,
                            TELKNumber = "0598415698"
                        },
                        new
                        {
                            Id = new Guid("4376ee53-2314-4d99-87b6-c08d9aecabcc"),
                            AdministratorId = "36f7ec79-9a12-4317-97ae-74b3476126d8",
                            Birthdate = new DateTime(1995, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = new Guid("6b827b51-65a3-4b0c-a59e-9f4d56951f82"),
                            FirstName = "Калин",
                            Gender = 0,
                            IsDeleted = false,
                            LastName = "Иванов",
                            MiddleName = "Цветанов",
                            PersonalId = "9512099847",
                            Street = "бул. Трети март",
                            StreetNumber = 19,
                            TELKNumber = "0195415679"
                        },
                        new
                        {
                            Id = new Guid("b22c5d21-5aa2-4a91-ae20-c43f16e7b6da"),
                            AdministratorId = "36f7ec79-9a12-4317-97ae-74b3476126d8",
                            Birthdate = new DateTime(1999, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = new Guid("9ac5590a-6946-471f-812f-503544b3fba7"),
                            FirstName = "Цветелина",
                            Gender = 1,
                            IsDeleted = false,
                            LastName = "Петрова",
                            MiddleName = "Ангелова",
                            PersonalId = "9902199878",
                            Street = "бул. България",
                            StreetNumber = 190,
                            TELKNumber = "0195415679"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlindUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmailSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlindUserId");

                    b.HasIndex("EmailSettingsId");

                    b.ToTable("BlindUsersEmails");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserLicence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlindUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfActivation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("BlindUserId");

                    b.ToTable("BlindUsersLicences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50fe5fd4-d950-4c24-aeb6-f03ffe011876"),
                            BlindUserId = new Guid("2b143304-b5f0-4029-ba97-449f09e66649"),
                            DateFrom = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfActivation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActivated = false,
                            IsDeleted = false,
                            LicenceNumber = "3434201450433354443419354"
                        },
                        new
                        {
                            Id = new Guid("01b89966-4d17-458c-92f9-8dc54bb4b973"),
                            BlindUserId = new Guid("4376ee53-2314-4d99-87b6-c08d9aecabcc"),
                            DateFrom = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfActivation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActivated = false,
                            IsDeleted = false,
                            LicenceNumber = "633233F3934E11B3240953444"
                        },
                        new
                        {
                            Id = new Guid("3b3ed71b-7b8a-4faf-9cc1-1b6705c03c1f"),
                            BlindUserId = new Guid("b22c5d21-5aa2-4a91-ae20-c43f16e7b6da"),
                            DateFrom = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfActivation = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActivated = false,
                            IsDeleted = false,
                            LicenceNumber = "43344809F0933812331B33344"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlindUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfLog")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogCode")
                        .HasColumnType("int");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlindUserId");

                    b.ToTable("BlindUsersLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7589b531-e7a1-4d77-b44f-0c4fbe62c4bc"),
                            BlindUserId = new Guid("4376ee53-2314-4d99-87b6-c08d9aecabcc"),
                            DateTimeOfLog = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogCode = 100,
                            LogText = "Въведеният ключ за ChatGPT е невалиден!",
                            LogType = "Грешка"
                        },
                        new
                        {
                            Id = new Guid("e7d6b236-fcd3-4333-8f57-32df271bb06f"),
                            BlindUserId = new Guid("4376ee53-2314-4d99-87b6-c08d9aecabcc"),
                            DateTimeOfLog = new DateTime(2023, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogCode = 100,
                            LogText = "Въведеният ключ за ChatGPT е невалиден!",
                            LogType = "Грешка"
                        },
                        new
                        {
                            Id = new Guid("fe7eb809-4416-462b-9708-3c4d68d5efcf"),
                            BlindUserId = new Guid("b22c5d21-5aa2-4a91-ae20-c43f16e7b6da"),
                            DateTimeOfLog = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LogCode = 100,
                            LogText = "Въведеният ключ за ChatGPT е невалиден!",
                            LogType = "Грешка"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.EmailSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailsSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66f45e2c-256e-4bdc-a449-347bfc97d1fa"),
                            IncomingServer = "imap.gmail.com",
                            Name = "Google Gmail",
                            OutgoingServer = "smpt.gmail.com",
                            Port = 993
                        },
                        new
                        {
                            Id = new Guid("5cd666d8-0009-46f6-84dc-00e30fc07501"),
                            IncomingServer = "outlook.office365.com",
                            Name = "Microsoft Outlook",
                            OutgoingServer = "smtp-mail.outlook.com",
                            Port = 993
                        },
                        new
                        {
                            Id = new Guid("ddbc2773-69fd-499f-95f2-87068dbe2d58"),
                            IncomingServer = "imap.mail.yahoo.com",
                            Name = "Yahoo Mail",
                            OutgoingServer = "smtp.mail.yahoo.com",
                            Port = 993
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Feature.BlindUserFeature", b =>
                {
                    b.Property<Guid>("BlindUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicenceKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlindUserId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("BlindUsersFeatures");

                    b.HasData(
                        new
                        {
                            BlindUserId = new Guid("2b143304-b5f0-4029-ba97-449f09e66649"),
                            FeatureId = new Guid("8855d892-574a-434a-b347-b88c716608b6"),
                            LicenceKey = ""
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Feature.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLicenceKeyRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("564c9939-9c1d-44a5-bc8a-f4cb16bce86a"),
                            IsLicenceKeyRequired = true,
                            Name = "ChatGPT"
                        },
                        new
                        {
                            Id = new Guid("8855d892-574a-434a-b347-b88c716608b6"),
                            IsLicenceKeyRequired = false,
                            Name = "Wikipedia"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Organisation.Organisation.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LocalPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89729ab3-fe73-49af-9bcf-97cf00c49e2f"),
                            CityId = new Guid("cc974363-80a0-47c1-8433-039d4bf99fd0"),
                            IsDeleted = false,
                            LocalPhone = "0886100156",
                            Name = "Съюз на слепите София",
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            Street = "ул. Цар Симеон",
                            StreetNumber = 110
                        },
                        new
                        {
                            Id = new Guid("eba30287-4914-4a15-bb3c-2dd3d53c918f"),
                            CityId = new Guid("65561ce7-3410-4c7a-b37f-86184a174a69"),
                            IsDeleted = false,
                            LocalPhone = "052732151",
                            Name = "Съюз на слепите - РСО Варна",
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            Street = "ул. Петко Стайнов",
                            StreetNumber = 3
                        },
                        new
                        {
                            Id = new Guid("c8723a30-71ec-4d7d-8017-b0df2900a455"),
                            CityId = new Guid("9ac5590a-6946-471f-812f-503544b3fba7"),
                            IsDeleted = false,
                            LocalPhone = "082841847",
                            Name = "Съюз на слепите - РСО Русе",
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            Street = "ж.к. Възраждане, ул. „Митрополит Григорий“",
                            StreetNumber = 3
                        },
                        new
                        {
                            Id = new Guid("0b919734-b960-436e-85a8-0e01eceab13d"),
                            CityId = new Guid("cc974363-80a0-47c1-8433-039d4bf99fd0"),
                            IsDeleted = false,
                            LocalPhone = "024448858",
                            Name = "Учебна зала - Фондация Хоризонти",
                            OrganisationId = new Guid("db7b29f9-8974-463b-8937-a28e3dc8d90f"),
                            Street = "бул. \"Цариградско шосе\"“",
                            StreetNumber = 125
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Organisation.OrganisationCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("National_Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organisations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            IsDeleted = false,
                            Name = "Съюз на слепите",
                            National_Phone = "028127050"
                        },
                        new
                        {
                            Id = new Guid("db7b29f9-8974-463b-8937-a28e3dc8d90f"),
                            IsDeleted = false,
                            Name = "Фондация Хоризонти",
                            National_Phone = "24448858"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnswered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10e455ec-e314-4bad-8228-040bf2c9f43f",
                            Name = "WaitingApproval",
                            NormalizedName = "WAITINGAPPROVAL"
                        },
                        new
                        {
                            Id = "369ea3ff-9318-4336-b3f9-83436e7ecc8e",
                            Name = "OfficeWorker",
                            NormalizedName = "OFFICEWORKER"
                        },
                        new
                        {
                            Id = "6f78d6a0-481a-4343-859f-f3eaa5d873df",
                            Name = "OrgAdministrator",
                            NormalizedName = "ORGADMINISTRATOR"
                        },
                        new
                        {
                            Id = "afcc821c-70c5-448a-a938-4f320fec7689",
                            Name = "UserAdministrator",
                            NormalizedName = "USERADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e556c4eb-7791-4dd2-a69a-c40bd94d002e",
                            Name = "OfficeAdministrator",
                            NormalizedName = "OFFICEADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "14423824-2618-46fb-b9fb-38666f84d6e9",
                            RoleId = "6f78d6a0-481a-4343-859f-f3eaa5d873df"
                        },
                        new
                        {
                            UserId = "36f7ec79-9a12-4317-97ae-74b3476126d8",
                            RoleId = "afcc821c-70c5-448a-a938-4f320fec7689"
                        },
                        new
                        {
                            UserId = "49952198-64dd-4b77-8c46-2e709c663737",
                            RoleId = "e556c4eb-7791-4dd2-a69a-c40bd94d002e"
                        },
                        new
                        {
                            UserId = "4bae9afb-921c-4732-87be-ab5eb984e4ca",
                            RoleId = "369ea3ff-9318-4336-b3f9-83436e7ecc8e"
                        },
                        new
                        {
                            UserId = "53c4614c-f814-407f-b798-858a9e20f1d4",
                            RoleId = "369ea3ff-9318-4336-b3f9-83436e7ecc8e"
                        },
                        new
                        {
                            UserId = "89f5afab-4dba-48e5-9375-94c8543bfc48",
                            RoleId = "6f78d6a0-481a-4343-859f-f3eaa5d873df"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DigAccess.Data.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MasterKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(10)
                        .HasColumnType("CHAR(10)");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PersonalId")
                        .IsUnique()
                        .HasFilter("[PersonalId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "14423824-2618-46fb-b9fb-38666f84d6e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d9475e6-7527-481e-afab-b0bdf4c69e4a",
                            Email = "horizonti@org.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "HORIZONTI@ORG.COM",
                            NormalizedUserName = "HORIZONTI@ORG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENreOGd42QJ4SEZUywLy1srF3OCAL4bAxvaqM92L3wPvKPAR3UWiMQg5qA4Q6Vd4EA==",
                            PhoneNumber = "0867457815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2N6K6Y6Q4MXGCNTPNZQNWHFE3FUF45NY",
                            TwoFactorEnabled = false,
                            UserName = "horizonti@org.com",
                            ApprovalStatus = 1,
                            FirstName = "Стефан",
                            Gender = 0,
                            LastName = "Стефанов",
                            MasterKey = "833E1343F4523319514F35444",
                            MiddleName = "Стефанов",
                            OrganisationId = new Guid("db7b29f9-8974-463b-8937-a28e3dc8d90f"),
                            PersonalId = "0151169845"
                        },
                        new
                        {
                            Id = "36f7ec79-9a12-4317-97ae-74b3476126d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b620419e-00d7-4602-b595-c1fa4e29c40d",
                            Email = "petar.petrov1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "PETAR.PETROV1@GMAIL.COM",
                            NormalizedUserName = "PETAR.PETROV1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEETkT0AGEK0+Xt9VDugMLgHXDGjQFftwWHbEObNJAPAYGHS+7SST6NYFx9LG3t9Rww==",
                            PhoneNumber = "0895648985",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NDCJYKMQVBYWCNFWA4LUGYCK44BWXFXA",
                            TwoFactorEnabled = false,
                            UserName = "petar.petrov1@gmail.com",
                            ApprovalStatus = 1,
                            FirstName = "Петър",
                            Gender = 0,
                            LastName = "Стефанов",
                            MasterKey = "833E1343F4523319514F35444",
                            MiddleName = "Петров",
                            OfficeId = new Guid("89729ab3-fe73-49af-9bcf-97cf00c49e2f"),
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            PersonalId = "7912159865"
                        },
                        new
                        {
                            Id = "49952198-64dd-4b77-8c46-2e709c663737",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38be0e6e-2b0b-44de-a407-7acbba9d4f58",
                            Email = "Angel.Borisov@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ANGEL.BORISOV@ADMIN.COM",
                            NormalizedUserName = "ANGEL.BORISOV@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJbq30iBdYk6UXkXeWcDCMC0qIuJL9xgRqA4d1FImLRtIMzPyI7T+ty9MQ8VWqebDQ==",
                            PhoneNumber = "0896947986",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "J6YSNRI2SP6JEEUDMSZOY6N6O3MCXG7A",
                            TwoFactorEnabled = false,
                            UserName = "Angel.Borisov@admin.com",
                            ApprovalStatus = 1,
                            FirstName = "Ангел",
                            Gender = 0,
                            LastName = "Борисов",
                            MiddleName = "Николов",
                            OfficeId = new Guid("eba30287-4914-4a15-bb3c-2dd3d53c918f"),
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            PersonalId = "8808169869"
                        },
                        new
                        {
                            Id = "4bae9afb-921c-4732-87be-ab5eb984e4ca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac9fe303-f9cb-499b-9bdc-d529c4c53997",
                            Email = "zoia.stefanova@worker.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ZOIA.STEFANOVA@WORKER.COM",
                            NormalizedUserName = "ZOIA.STEFANOVA@WORKER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3bsQmvXGw2pc7tq4zT4qX9HfRb/doo3FGUN8yOH7EoEAAEV8ZFIwoC8i64YZHB2A==",
                            PhoneNumber = "0895447985",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "W7QE7CBRYKNQZ3KW3TL3OY3RAWIACOV2",
                            TwoFactorEnabled = false,
                            UserName = "zoia.stefanova@worker.com",
                            ApprovalStatus = 1,
                            FirstName = "Зоя",
                            Gender = 1,
                            LastName = "Николова",
                            MiddleName = "Стефанова",
                            OfficeId = new Guid("89729ab3-fe73-49af-9bcf-97cf00c49e2f"),
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            PersonalId = "7805059878"
                        },
                        new
                        {
                            Id = "53c4614c-f814-407f-b798-858a9e20f1d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62ff3364-38f4-4963-b34a-4374055f778a",
                            Email = "nikolay.nikolov@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "NIKOLAY.NIKOLOV@ADMIN.COM",
                            NormalizedUserName = "NIKOLAY.NIKOLOV@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJt44Jxyi0L3HAZY5seapTblWHInH6nrhZ3lhMKo2ZFkcfkkh/UYO7EIzhL+ojpcxQ==",
                            PhoneNumber = "0895447985",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VWXASGBD55KBOPAXBKNT355V3K7ENO3S",
                            TwoFactorEnabled = false,
                            UserName = "nikolay.nikolov@admin.com",
                            ApprovalStatus = 1,
                            FirstName = "Николай",
                            Gender = 0,
                            LastName = "Николова",
                            MiddleName = "Карашимов",
                            OfficeId = new Guid("89729ab3-fe73-49af-9bcf-97cf00c49e2f"),
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            PersonalId = "9704059669"
                        },
                        new
                        {
                            Id = "89f5afab-4dba-48e5-9375-94c8543bfc48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27d1d3fa-bcfe-4018-bb03-dfa82fce882a",
                            Email = "blindunion@org.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "BLINDUNION@ORG.COM",
                            NormalizedUserName = "BLINDUNION@ORG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELL4+GOCpW1GGuK0scEGkRoA88sy6YeKU012G88HWU/bItaxcvn1DG+ZKXL/JBua8w==",
                            PhoneNumber = "0895446985",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JKX7PPCCKW4WFU6P3TY2PKN4SV3QOW7D",
                            TwoFactorEnabled = false,
                            UserName = "blindunion@org.com",
                            ApprovalStatus = 1,
                            FirstName = "Петър",
                            Gender = 0,
                            LastName = "Петров",
                            MiddleName = "Петров",
                            OrganisationId = new Guid("c5e270c8-df31-40ec-938e-d1300457f3ef"),
                            PersonalId = "7512059861"
                        });
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Answer", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUser", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.ApplicationUser", "AdministratorUser")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigAccess.Data.Entities.Address.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministratorUser");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserEmail", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Blind.BlindUser", "BlindUser")
                        .WithMany()
                        .HasForeignKey("BlindUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigAccess.Data.Entities.Blind.EmailSettings", "EmailSettings")
                        .WithMany("BlindUserEmails")
                        .HasForeignKey("EmailSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlindUser");

                    b.Navigation("EmailSettings");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserLicence", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Blind.BlindUser", "BlindUser")
                        .WithMany("BlindUserLicences")
                        .HasForeignKey("BlindUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlindUser");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUserLog", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Blind.BlindUser", "BlindUser")
                        .WithMany("BlindUserLogs")
                        .HasForeignKey("BlindUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlindUser");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Feature.BlindUserFeature", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Blind.BlindUser", "BlindUser")
                        .WithMany()
                        .HasForeignKey("BlindUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigAccess.Data.Entities.Feature.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlindUser");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Organisation.Organisation.Office", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Address.City", "City")
                        .WithMany("Offices")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigAccess.Data.Entities.Organisation.OrganisationCompany", "Organisation")
                        .WithMany("Offices")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Question", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigAccess.Data.Entities.ApplicationUser", b =>
                {
                    b.HasOne("DigAccess.Data.Entities.Organisation.Organisation.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("DigAccess.Data.Entities.Organisation.OrganisationCompany", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Office");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Address.City", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.BlindUser", b =>
                {
                    b.Navigation("BlindUserLicences");

                    b.Navigation("BlindUserLogs");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Blind.EmailSettings", b =>
                {
                    b.Navigation("BlindUserEmails");
                });

            modelBuilder.Entity("DigAccess.Data.Entities.Organisation.OrganisationCompany", b =>
                {
                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
